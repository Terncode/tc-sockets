"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeWithResize = exports.isSizeError = exports.writeAny = exports.writeStringValue = exports.writeBytes = exports.writeBytesRangeView = exports.writeBytesRange = exports.writeFloat64 = exports.writeFloat32 = exports.writeUint32 = exports.writeInt32 = exports.writeUint16 = exports.writeInt16 = exports.writeUint8 = exports.writeInt8 = exports.resizeWriter = exports.resetWriter = exports.getWriterBuffer = exports.writeLength = exports.writeArray = exports.writeArrayHeader = exports.writeArrayBuffer = exports.writeUint8Array = exports.writeObject = exports.writeString = exports.writeBoolean = exports.createBinaryWriter = void 0;
var utf8_1 = require("../common/utf8");
function createBinaryWriter(bufferOrSize) {
    if (bufferOrSize === void 0) { bufferOrSize = 32; }
    var buf = typeof bufferOrSize === 'number' ? new ArrayBuffer(bufferOrSize) : bufferOrSize;
    var view = buf instanceof Uint8Array ? new DataView(buf.buffer, buf.byteOffset, buf.byteLength) : new DataView(buf);
    return { view: view, offset: 0 };
}
exports.createBinaryWriter = createBinaryWriter;
function writeBoolean(writer, value) {
    writeUint8(writer, value ? 1 : 0);
}
exports.writeBoolean = writeBoolean;
function writeString(writer, value) {
    if (value == null) {
        writeNullLength(writer);
    }
    else {
        writeLength(writer, (0, utf8_1.stringLengthInBytes)(value));
        writeStringValue(writer, value);
    }
}
exports.writeString = writeString;
function writeObject(writer, value) {
    writeAny(writer, value, new Map());
}
exports.writeObject = writeObject;
function writeUint8Array(writer, value) {
    if (value == null) {
        writeNullLength(writer);
    }
    else if (value instanceof Uint8Array) {
        writeLength(writer, value.byteLength);
        writeBytes(writer, value);
    }
    else {
        throw new Error('Value is not Uint8Array');
    }
}
exports.writeUint8Array = writeUint8Array;
function writeArrayBuffer(writer, value) {
    if (value == null) {
        writeNullLength(writer);
    }
    else if (value instanceof ArrayBuffer) {
        writeLength(writer, value.byteLength);
        writeBytes(writer, new Uint8Array(value));
    }
    else {
        throw new Error('Value is not ArrayBuffer');
    }
}
exports.writeArrayBuffer = writeArrayBuffer;
function writeArrayHeader(writer, value) {
    if (value == null) {
        writeNullLength(writer);
        return false;
    }
    else {
        writeLength(writer, value.length);
        return true;
    }
}
exports.writeArrayHeader = writeArrayHeader;
function writeArray(writer, value, writeOne) {
    if (writeArrayHeader(writer, value)) {
        for (var i = 0; i < value.length; i++) {
            writeOne(writer, value[i]);
        }
    }
}
exports.writeArray = writeArray;
function writeNullLength(writer) {
    writeUint8(writer, 0);
}
function writeLength(writer, value) {
    if (value < -1 || value > 0x7ffffffe)
        throw new Error('Invalid length value');
    value++;
    if (value === 0) {
        writeNullLength(writer);
    }
    else if ((value & 0xffffff80) === 0) {
        writeUint8(writer, value);
    }
    else if ((value & 0xffffc000) === 0) {
        var a = (value & 0x7f) | 0x80;
        var b = value >> 7;
        writeUint16(writer, (b << 8) | a);
    }
    else if ((value & 0xffe00000) === 0) {
        var a = (value & 0x7f) | 0x80;
        var b = ((value >> 7) & 0x7f) | 0x80;
        var c = value >> 14;
        writeUint8(writer, a);
        writeUint16(writer, (c << 8) | b);
    }
    else if ((value & 0xf0000000) === 0) {
        var a = (value & 0x7f) | 0x80;
        var b = ((value >> 7) & 0x7f) | 0x80;
        var c = ((value >> 14) & 0x7f) | 0x80;
        var d = value >> 21;
        writeUint32(writer, (d << 24) | (c << 16) | (b << 8) | a);
    }
    else {
        var a = (value & 0x7f) | 0x80;
        var b = ((value >> 7) & 0x7f) | 0x80;
        var c = ((value >> 14) & 0x7f) | 0x80;
        var d = ((value >> 21) & 0x7f) | 0x80;
        var e = value >> 28;
        writeUint8(writer, a);
        writeUint32(writer, (e << 24) | (d << 16) | (c << 8) | b);
    }
}
exports.writeLength = writeLength;
function getWriterBuffer(_a) {
    var view = _a.view, offset = _a.offset;
    return new Uint8Array(view.buffer, view.byteOffset, offset);
}
exports.getWriterBuffer = getWriterBuffer;
function resetWriter(writer) {
    writer.offset = 0;
}
exports.resetWriter = resetWriter;
function resizeWriter(writer) {
    writer.view = new DataView(new ArrayBuffer(writer.view.byteLength * 2));
    writer.offset = 0;
}
exports.resizeWriter = resizeWriter;
function writeInt8(writer, value) {
    writer.view.setInt8(writer.offset, value | 0);
    writer.offset += 1;
}
exports.writeInt8 = writeInt8;
function writeUint8(writer, value) {
    writer.view.setUint8(writer.offset, value | 0);
    writer.offset += 1;
}
exports.writeUint8 = writeUint8;
function writeInt16(writer, value) {
    writer.view.setInt16(writer.offset, value | 0, true);
    writer.offset += 2;
}
exports.writeInt16 = writeInt16;
function writeUint16(writer, value) {
    writer.view.setUint16(writer.offset, value | 0, true);
    writer.offset += 2;
}
exports.writeUint16 = writeUint16;
function writeInt32(writer, value) {
    writer.view.setInt32(writer.offset, value | 0, true);
    writer.offset += 4;
}
exports.writeInt32 = writeInt32;
function writeUint32(writer, value) {
    writer.view.setUint32(writer.offset, value | 0, true);
    writer.offset += 4;
}
exports.writeUint32 = writeUint32;
function writeFloat32(writer, value) {
    writer.view.setFloat32(writer.offset, +value, true);
    writer.offset += 4;
}
exports.writeFloat32 = writeFloat32;
function writeFloat64(writer, value) {
    writer.view.setFloat64(writer.offset, +value, true);
    writer.offset += 8;
}
exports.writeFloat64 = writeFloat64;
function writeBytesRange(writer, value, offset, length) {
    writeLength(writer, length);
    var view = writer.view;
    if ((writer.offset + length) > view.byteLength) {
        throw new Error('Exceeded DataView size');
    }
    var dst = writer.offset;
    var src = offset;
    for (var dstEnd = dst + length; dst < dstEnd; dst++, src++) {
        view.setUint8(dst, value[src]);
    }
    writer.offset += length;
}
exports.writeBytesRange = writeBytesRange;
function writeBytesRangeView(writer, value, offset, length) {
    writeLength(writer, length);
    var view = writer.view;
    if ((writer.offset + length) > view.byteLength) {
        throw new Error('Exceeded DataView size');
    }
    var dst = writer.offset;
    var src = offset;
    for (var dstEnd = dst + length; dst < dstEnd; dst++, src++) {
        view.setUint8(dst, value.getUint8(src));
    }
    writer.offset += length;
}
exports.writeBytesRangeView = writeBytesRangeView;
function writeBytes(writer, value) {
    if ((writer.offset + value.byteLength) > writer.view.byteLength) {
        throw new Error('Exceeded DataView size');
    }
    var view = writer.view;
    for (var src = 0, length_1 = value.length, dst = writer.offset; src < length_1; src++, dst++) {
        view.setUint8(dst, value[src]);
    }
    writer.offset += value.byteLength;
}
exports.writeBytes = writeBytes;
function writeStringValue(writer, value) {
    writer.offset = (0, utf8_1.encodeStringTo)(writer.view, writer.offset, value);
    if (writer.offset > writer.view.byteLength) {
        throw new Error('Exceeded DataView size');
    }
}
exports.writeStringValue = writeStringValue;
var floats = new Float32Array(1);
function writeShortLength(writer, type, length) {
    if (length < 31) {
        writeUint8(writer, type | length);
        return true;
    }
    else {
        writeUint8(writer, type | 0x1f);
        writeLength(writer, length);
        return false;
    }
}
function writeAny(writer, value, strings) {
    if (value === undefined) {
        writeUint8(writer, 0 /* Type.Special */ | 0 /* Special.Undefined */);
    }
    else if (value === null) {
        writeUint8(writer, 0 /* Type.Special */ | 1 /* Special.Null */);
    }
    else if (value === true) {
        writeUint8(writer, 0 /* Type.Special */ | 2 /* Special.True */);
    }
    else if (value === false) {
        writeUint8(writer, 0 /* Type.Special */ | 3 /* Special.False */);
    }
    else if (typeof value === 'number') {
        if ((value >>> 0) === value) {
            value = value >>> 0;
            if (value & 0xffff0000) {
                writeUint8(writer, 32 /* Type.Number */ | 5 /* NumberType.Uint32 */);
                writeUint32(writer, value);
            }
            else if (value & 0xff00) {
                writeUint8(writer, 32 /* Type.Number */ | 3 /* NumberType.Uint16 */);
                writeUint16(writer, value);
            }
            else if (value & 0xe0) {
                writeUint8(writer, 32 /* Type.Number */ | 1 /* NumberType.Uint8 */);
                writeUint8(writer, value);
            }
            else {
                writeUint8(writer, 160 /* Type.TinyPositiveNumber */ | value);
            }
        }
        else if ((value | 0) === value) {
            value = value | 0;
            if (value > -32 && value <= -1) {
                writeUint8(writer, 192 /* Type.TinyNegativeNumber */ | (-value - 1));
            }
            else if (value >= -128 && value <= 127) {
                writeUint8(writer, 32 /* Type.Number */ | 0 /* NumberType.Int8 */);
                writeInt8(writer, value);
            }
            else if (value >= -32768 && value <= 32767) {
                writeUint8(writer, 32 /* Type.Number */ | 2 /* NumberType.Int16 */);
                writeInt16(writer, value);
            }
            else {
                writeUint8(writer, 32 /* Type.Number */ | 4 /* NumberType.Int32 */);
                writeInt32(writer, value);
            }
        }
        else {
            floats[0] = value;
            if (floats[0] === value) {
                writeUint8(writer, 32 /* Type.Number */ | 6 /* NumberType.Float32 */);
                writeFloat32(writer, value);
            }
            else {
                writeUint8(writer, 32 /* Type.Number */ | 7 /* NumberType.Float64 */);
                writeFloat64(writer, value);
            }
        }
    }
    else if (typeof value === 'string') {
        var index = strings.get(value);
        if (index !== undefined) {
            writeShortLength(writer, 224 /* Type.StringRef */, index);
        }
        else {
            var length_2 = (0, utf8_1.stringLengthInBytes)(value);
            writeShortLength(writer, 64 /* Type.String */, length_2);
            writeStringValue(writer, value);
            strings.set(value, strings.size);
        }
    }
    else if (Array.isArray(value)) {
        var length_3 = value.length;
        writeShortLength(writer, 96 /* Type.Array */, length_3);
        for (var i = 0; i < length_3; i++) {
            writeAny(writer, value[i], strings);
        }
    }
    else if (typeof value === 'object') {
        if (value instanceof Uint8Array) {
            writeUint8(writer, 0 /* Type.Special */ | 4 /* Special.Uint8Array */);
            writeUint8Array(writer, value);
        }
        else {
            var keys = Object.keys(value);
            writeShortLength(writer, 128 /* Type.Object */, keys.length);
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var index = strings.get(key);
                if (index === undefined) {
                    writeLength(writer, (0, utf8_1.stringLengthInBytes)(key));
                    writeStringValue(writer, key);
                    if (key) {
                        strings.set(key, strings.size);
                    }
                }
                else {
                    writeLength(writer, 0);
                    writeLength(writer, index);
                }
                writeAny(writer, value[key], strings);
            }
        }
    }
    else {
        throw new Error("Invalid type: ".concat(value));
    }
}
exports.writeAny = writeAny;
function isSizeError(e) {
    if (typeof RangeError !== 'undefined' && e instanceof RangeError)
        return true;
    if (typeof TypeError !== 'undefined' && e instanceof TypeError)
        return true;
    if (typeof IndexSizeError !== 'undefined' && e instanceof IndexSizeError)
        return true;
    if (/DataView/.test(e.message))
        return true;
    return false;
}
exports.isSizeError = isSizeError;
function writeWithResize(writer, write) {
    while (true) {
        try {
            write();
            break;
        }
        catch (e) {
            if (isSizeError(e)) {
                resizeWriter(writer);
            }
            else {
                throw e;
            }
        }
    }
}
exports.writeWithResize = writeWithResize;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYWNrZXQvYmluYXJ5V3JpdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVDQUFxRTtBQVFyRSxTQUFnQixrQkFBa0IsQ0FBQyxZQUFvRDtJQUFwRCw2QkFBQSxFQUFBLGlCQUFvRDtJQUN0RixJQUFNLEdBQUcsR0FBRyxPQUFPLFlBQVksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7SUFDNUYsSUFBTSxJQUFJLEdBQUcsR0FBRyxZQUFZLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEgsT0FBTyxFQUFFLElBQUksTUFBQSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUM1QixDQUFDO0FBSkQsZ0RBSUM7QUFFRCxTQUFnQixZQUFZLENBQUMsTUFBb0IsRUFBRSxLQUFjO0lBQ2hFLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFGRCxvQ0FFQztBQUVELFNBQWdCLFdBQVcsQ0FBQyxNQUFvQixFQUFFLEtBQW9CO0lBQ3JFLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtRQUNsQixlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDeEI7U0FBTTtRQUNOLFdBQVcsQ0FBQyxNQUFNLEVBQUUsSUFBQSwwQkFBbUIsRUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hELGdCQUFnQixDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNoQztBQUNGLENBQUM7QUFQRCxrQ0FPQztBQUVELFNBQWdCLFdB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QUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ2xDO1NBQU0sSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDdEMsSUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLElBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3ZDLElBQU0sQ0FBQyxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDdEIsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0QixXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ2xDO1NBQU0sSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDdEMsSUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLElBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3ZDLElBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3hDLElBQU0sQ0FBQyxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDdEIsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUMxRDtTQUFNO1FBQ04sSUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFL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QW1HQztBQUlELFNBQWdCLFdBQVcsQ0FBQyxDQUFRO0lBQ25DLElBQUksT0FBTyxVQUFVLEtBQUssV0FBVyxJQUFJLENBQUMsWUFBWSxVQUFVO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDOUUsSUFBSSxPQUFPLFNBQVMsS0FBSyxXQUFXLElBQUksQ0FBQyxZQUFZLFNBQVM7UUFBRSxPQUFPLElBQUksQ0FBQztJQUM1RSxJQUFJLE9BQU8sY0FBYyxLQUFLLFdBQVcsSUFBSSxDQUFDLFlBQVksY0FBYztRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ3RGLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDNUMsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDO0FBTkQsa0NBTUM7QUFFRCxTQUFnQixlQUFlLENBQUMsTUFBb0IsRUFBRSxLQUFpQjtJQUN0RSxPQUFPLElBQUksRUFBRTtRQUNaLElBQUk7WUFDSCxLQUFLLEVBQUUsQ0FBQztZQUNSLE1BQU07U0FDTjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1gsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25CLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNyQjtpQkFBTTtnQkFDTixNQUFNLENBQUMsQ0FBQzthQUNSO1NBQ0Q7S0FDRDtBQUNGLENBQUM7QUFiRCwwQ0FhQyIsImZpbGUiOiJwYWNrZXQvYmluYXJ5V3JpdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW5jb2RlU3RyaW5nVG8sIHN0cmluZ0xlbmd0aEluQnl0ZXMgfSBmcm9tICcuLi9jb21tb24vdXRmOCc7XG5pbXBvcnQgeyBUeXBlLCBTcGVjaWFsLCBOdW1iZXJUeXBlIH0gZnJvbSAnLi9wYWNrZXRDb21tb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJpbmFyeVdyaXRlciB7XG5cdHZpZXc6IERhdGFWaWV3O1xuXHRvZmZzZXQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJpbmFyeVdyaXRlcihidWZmZXJPclNpemU6IEFycmF5QnVmZmVyIHwgVWludDhBcnJheSB8IG51bWJlciA9IDMyKTogQmluYXJ5V3JpdGVyIHtcblx0Y29uc3QgYnVmID0gdHlwZW9mIGJ1ZmZlck9yU2l6ZSA9PT0gJ251bWJlcicgPyBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyT3JTaXplKSA6IGJ1ZmZlck9yU2l6ZTtcblx0Y29uc3QgdmlldyA9IGJ1ZiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBuZXcgRGF0YVZpZXcoYnVmLmJ1ZmZlciwgYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5ieXRlTGVuZ3RoKSA6IG5ldyBEYXRhVmlldyhidWYpO1xuXHRyZXR1cm4geyB2aWV3LCBvZmZzZXQ6IDAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlQm9vbGVhbih3cml0ZXI6IEJpbmFyeVdyaXRlciwgdmFsdWU6IGJvb2xlYW4pIHtcblx0d3JpdGVVaW50OCh3cml0ZXIsIHZhbHVlID8gMSA6IDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVTdHJpbmcod3JpdGVyOiBCaW5hcnlXcml0ZXIsIHZhbHVlOiBzdHJpbmcgfCBudWxsKSB7XG5cdGlmICh2YWx1ZSA9PSBudWxsKSB7XG5cdFx0d3JpdGVOdWxsTGVuZ3RoKHdyaXRlcik7XG5cdH0gZWxzZSB7XG5cdFx0d3JpdGVMZW5ndGgod3JpdGVyLCBzdHJpbmdMZW5ndGhJbkJ5dGVzKHZhbHVlKSk7XG5cdFx0d3JpdGVTdHJpbmdWYWx1ZSh3cml0ZXIsIHZhbHVlKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVPYmplY3Qod3JpdGVyOiBCaW5hcnlXcml0ZXIsIHZhbHVlOiBhbnkpIHtcblx0d3JpdGVBbnkod3JpdGVyLCB2YWx1ZSwgbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZVVpbnQ4QXJyYXkod3JpdGVyOiBCaW5hcnlXcml0ZXIsIHZhbHVlOiBVaW50OEFycmF5IHwgbnVsbCkge1xuXHRpZiAodmFsdWUgPT0gbnVsbCkge1xuXHRcdHdyaXRlTnVsbExlbmd0aCh3cml0ZXIpO1xuXHR9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuXHRcdHdyaXRlTGVuZ3RoKHdyaXRlciwgdmFsdWUuYnl0ZUxlbmd0aCk7XG5cdFx0d3JpdGVCeXRlcyh3cml0ZXIsIHZhbHVlKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1ZhbHVlIGlzIG5vdCBVaW50OEFycmF5Jyk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlQXJyYXlCdWZmZXIod3JpdGVyOiBCaW5hcnlXcml0ZXIsIHZhbHVlOiBBcnJheUJ1ZmZlciB8IG51bGwpIHtcblx0aWYgKHZhbHVlID09IG51bGwpIHtcblx0XHR3cml0ZU51bGxMZW5ndGgod3JpdGVyKTtcblx0fSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG5cdFx0d3JpdGVMZW5ndGgod3JpdGVyLCB2YWx1ZS5ieXRlTGVuZ3RoKTtcblx0XHR3cml0ZUJ5dGVzKHdyaXRlciwgbmV3IFVpbnQ4QXJyYXkodmFsdWUpKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1ZhbHVlIGlzIG5vdCBBcnJheUJ1ZmZlcicpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZUFycmF5SGVhZGVyPFQ+KHdyaXRlcjogQmluYXJ5V3JpdGVyLCB2YWx1ZTogVFtdIHwgbnVsbCk6IHZhbHVlIGlzIFRbXSB7XG5cdGlmICh2YWx1ZSA9PSBudWxsKSB7XG5cdFx0d3JpdGVOdWxsTGVuZ3RoKHdyaXRlcik7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGVsc2Uge1xuXHRcdHdyaXRlTGVuZ3RoKHdyaXRlciwgdmFsdWUubGVuZ3RoKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVBcnJheTxUPih3cml0ZXI6IEJpbmFyeVdyaXRlciwgdmFsdWU6IFRbXSB8IG51bGwsIHdyaXRlT25lOiAod3JpdGVyOiBCaW5hcnlXcml0ZXIsIGl0ZW06IFQpID0+IHZvaWQpIHtcblx0aWYgKHdyaXRlQXJyYXlIZWFkZXIod3JpdGVyLCB2YWx1ZSkpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR3cml0ZU9uZSh3cml0ZXIsIHZhbHVlW2ldKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gd3JpdGVOdWxsTGVuZ3RoKHdyaXRlcjogQmluYXJ5V3JpdGVyKSB7XG5cdHdyaXRlVWludDgod3JpdGVyLCAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlTGVuZ3RoKHdyaXRlcjogQmluYXJ5V3JpdGVyLCB2YWx1ZTogbnVtYmVyKSB7XG5cdGlmICh2YWx1ZSA8IC0xIHx8IHZhbHVlID4gMHg3ZmZmZmZmZSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGxlbmd0aCB2YWx1ZScpO1xuXG5cdHZhbHVlKys7XG5cblx0aWYgKHZhbHVlID09PSAwKSB7XG5cdFx0d3JpdGVOdWxsTGVuZ3RoKHdyaXRlcik7XG5cdH0gZWxzZSBpZiAoKHZhbHVlICYgMHhmZmZmZmY4MCkgPT09IDApIHtcblx0XHR3cml0ZVVpbnQ4KHdyaXRlciwgdmFsdWUpO1xuXHR9IGVsc2UgaWYgKCh2YWx1ZSAmIDB4ZmZmZmMwMDApID09PSAwKSB7XG5cdFx0Y29uc3QgYSA9ICh2YWx1ZSAmIDB4N2YpIHwgMHg4MDtcblx0XHRjb25zdCBiID0gdmFsdWUgPj4gNztcblx0XHR3cml0ZVVpbnQxNih3cml0ZXIsIChiIDw8IDgpIHwgYSk7XG5cdH0gZWxzZSBpZiAoKHZhbHVlICYgMHhmZmUwMDAwMCkgPT09IDApIHtcblx0XHRjb25zdCBhID0gKHZhbHVlICYgMHg3ZikgfCAweDgwO1xuXHRcdGNvbnN0IGIgPSAoKHZhbHVlID4+IDcpICYgMHg3ZikgfCAweDgwO1xuXHRcdGNvbnN0IGMgPSB2YWx1ZSA+PiAxNDtcblx0XHR3cml0ZVVpbnQ4KHdyaXRlciwgYSk7XG5cdFx0d3JpdGVVaW50MTYod3JpdGVyLCAoYyA8PCA4KSB8IGIpO1xuXHR9IGVsc2UgaWYgKCh2YWx1ZSAmIDB4ZjAwMDAwMDApID09PSAwKSB7XG5cdFx0Y29uc3QgYSA9ICh2YWx1ZSAmIDB4N2YpIHwgMHg4MDtcblx0XHRjb25zdCBiID0gKCh2YWx1ZSA+PiA3KSAmIDB4N2YpIHwgMHg4MDtcblx0XHRjb25zdCBjID0gKCh2YWx1ZSA+PiAxNCkgJiAweDdmKSB8IDB4ODA7XG5cdFx0Y29uc3QgZCA9IHZhbHVlID4+IDIxO1xuXHRcdHdyaXRlVWludDMyKHdyaXRlciwgKGQgPDwgMjQpIHwgKGMgPDwgMTYpIHwgKGIgPDwgOCkgfCBhKTtcblx0fSBlbHNlIHtcblx0XHRjb25zdCBhID0gKHZhbHVlICYgMHg3ZikgfCAweDgwO1xuXHRcdGNvbnN0IGIgPSAoKHZhbHVlID4+IDcpICYgMHg3ZikgfCAweDgwO1xuXHRcdGNvbnN0IGMgPSAoKHZhbHVlID4+IDE0KSAmIDB4N2YpIHwgMHg4MDtcblx0XHRjb25zdCBkID0gKCh2YWx1ZSA+PiAyMSkgJiAweDdmKSB8IDB4ODA7XG5cdFx0Y29uc3QgZSA9IHZhbHVlID4+IDI4O1xuXHRcdHdyaXRlVWludDgod3JpdGVyLCBhKTtcblx0XHR3cml0ZVVpbnQzMih3cml0ZXIsIChlIDw8IDI0KSB8IChkIDw8IDE2KSB8IChjIDw8IDgpIHwgYik7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdyaXRlckJ1ZmZlcih7IHZpZXcsIG9mZnNldCB9OiBCaW5hcnlXcml0ZXIpIHtcblx0cmV0dXJuIG5ldyBVaW50OEFycmF5KHZpZXcuYnVmZmVyLCB2aWV3LmJ5dGVPZmZzZXQsIG9mZnNldCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldFdyaXRlcih3cml0ZXI6IEJpbmFyeVdyaXRlcikge1xuXHR3cml0ZXIub2Zmc2V0ID0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2l6ZVdyaXRlcih3cml0ZXI6IEJpbmFyeVdyaXRlcikge1xuXHR3cml0ZXIudmlldyA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIod3JpdGVyLnZpZXcuYnl0ZUxlbmd0aCAqIDIpKTtcblx0d3JpdGVyLm9mZnNldCA9IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZUludDgod3JpdGVyOiBCaW5hcnlXcml0ZXIsIHZhbHVlOiBudW1iZXIpIHtcblx0d3JpdGVyLnZpZXcuc2V0SW50OCh3cml0ZXIub2Zmc2V0LCB2YWx1ZSB8IDApO1xuXHR3cml0ZXIub2Zmc2V0ICs9IDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZVVpbnQ4KHdyaXRlcjogQmluYXJ5V3JpdGVyLCB2YWx1ZTogbnVtYmVyKSB7XG5cdHdyaXRlci52aWV3LnNldFVpbnQ4KHdyaXRlci5vZmZzZXQsIHZhbHVlIHwgMCk7XG5cdHdyaXRlci5vZmZzZXQgKz0gMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlSW50MTYod3JpdGVyOiBCaW5hcnlXcml0ZXIsIHZhbHVlOiBudW1iZXIpIHtcblx0d3JpdGVyLnZpZXcuc2V0SW50MTYod3JpdGVyLm9mZnNldCwgdmFsdWUgfCAwLCB0cnVlKTtcblx0d3JpdGVyLm9mZnNldCArPSAyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVVaW50MTYod3JpdGVyOiBCaW5hcnlXcml0ZXIsIHZhbHVlOiBudW1iZXIpIHtcblx0d3JpdGVyLnZpZXcuc2V0VWludDE2KHdyaXRlci5vZmZzZXQsIHZhbHVlIHwgMCwgdHJ1ZSk7XG5cdHdyaXRlci5vZmZzZXQgKz0gMjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlSW50MzIod3JpdGVyOiBCaW5hcnlXcml0ZXIsIHZhbHVlOiBudW1iZXIpIHtcblx0d3JpdGVyLnZpZXcuc2V0SW50MzIod3JpdGVyLm9mZnNldCwgdmFsdWUgfCAwLCB0cnVlKTtcblx0d3JpdGVyLm9mZnNldCArPSA0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVVaW50MzIod3JpdGVyOiBCaW5hcnlXcml0ZXIsIHZhbHVlOiBudW1iZXIpIHtcblx0d3JpdGVyLnZpZXcuc2V0VWludDMyKHdyaXRlci5vZmZzZXQsIHZhbHVlIHwgMCwgdHJ1ZSk7XG5cdHdyaXRlci5vZmZzZXQgKz0gNDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlRmxvYXQzMih3cml0ZXI6IEJpbmFyeVdyaXRlciwgdmFsdWU6IG51bWJlcikge1xuXHR3cml0ZXIudmlldy5zZXRGbG9hdDMyKHdyaXRlci5vZmZzZXQsICt2YWx1ZSwgdHJ1ZSk7XG5cdHdyaXRlci5vZmZzZXQgKz0gNDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlRmxvYXQ2NCh3cml0ZXI6IEJpbmFyeVdyaXRlciwgdmFsdWU6IG51bWJlcikge1xuXHR3cml0ZXIudmlldy5zZXRGbG9hdDY0KHdyaXRlci5vZmZzZXQsICt2YWx1ZSwgdHJ1ZSk7XG5cdHdyaXRlci5vZmZzZXQgKz0gODtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlQnl0ZXNSYW5nZSh3cml0ZXI6IEJpbmFyeVdyaXRlciwgdmFsdWU6IFVpbnQ4QXJyYXksIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlcikge1xuXHR3cml0ZUxlbmd0aCh3cml0ZXIsIGxlbmd0aCk7XG5cdGNvbnN0IHZpZXcgPSB3cml0ZXIudmlldztcblxuXHRpZiAoKHdyaXRlci5vZmZzZXQgKyBsZW5ndGgpID4gdmlldy5ieXRlTGVuZ3RoKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdFeGNlZWRlZCBEYXRhVmlldyBzaXplJyk7XG5cdH1cblxuXHRsZXQgZHN0ID0gd3JpdGVyLm9mZnNldDtcblx0bGV0IHNyYyA9IG9mZnNldDtcblxuXHRmb3IgKGNvbnN0IGRzdEVuZCA9IGRzdCArIGxlbmd0aDsgZHN0IDwgZHN0RW5kOyBkc3QrKywgc3JjKyspIHtcblx0XHR2aWV3LnNldFVpbnQ4KGRzdCwgdmFsdWVbc3JjXSk7XG5cdH1cblxuXHR3cml0ZXIub2Zmc2V0ICs9IGxlbmd0aDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlQnl0ZXNSYW5nZVZpZXcod3JpdGVyOiBCaW5hcnlXcml0ZXIsIHZhbHVlOiBEYXRhVmlldywgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKSB7XG5cdHdyaXRlTGVuZ3RoKHdyaXRlciwgbGVuZ3RoKTtcblx0Y29uc3QgdmlldyA9IHdyaXRlci52aWV3O1xuXG5cdGlmICgod3JpdGVyLm9mZnNldCArIGxlbmd0aCkgPiB2aWV3LmJ5dGVMZW5ndGgpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0V4Y2VlZGVkIERhdGFWaWV3IHNpemUnKTtcblx0fVxuXG5cdGxldCBkc3QgPSB3cml0ZXIub2Zmc2V0O1xuXHRsZXQgc3JjID0gb2Zmc2V0O1xuXG5cdGZvciAoY29uc3QgZHN0RW5kID0gZHN0ICsgbGVuZ3RoOyBkc3QgPCBkc3RFbmQ7IGRzdCsrLCBzcmMrKykge1xuXHRcdHZpZXcuc2V0VWludDgoZHN0LCB2YWx1ZS5nZXRVaW50OChzcmMpKTtcblx0fVxuXG5cdHdyaXRlci5vZmZzZXQgKz0gbGVuZ3RoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVCeXRlcyh3cml0ZXI6IEJpbmFyeVdyaXRlciwgdmFsdWU6IFVpbnQ4QXJyYXkpIHtcblx0aWYgKCh3cml0ZXIub2Zmc2V0ICsgdmFsdWUuYnl0ZUxlbmd0aCkgPiB3cml0ZXIudmlldy5ieXRlTGVuZ3RoKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdFeGNlZWRlZCBEYXRhVmlldyBzaXplJyk7XG5cdH1cblxuXHRjb25zdCB2aWV3ID0gd3JpdGVyLnZpZXc7XG5cblx0Zm9yIChsZXQgc3JjID0gMCwgbGVuZ3RoID0gdmFsdWUubGVuZ3RoLCBkc3QgPSB3cml0ZXIub2Zmc2V0OyBzcmMgPCBsZW5ndGg7IHNyYysrLCBkc3QrKykge1xuXHRcdHZpZXcuc2V0VWludDgoZHN0LCB2YWx1ZVtzcmNdKTtcblx0fVxuXG5cdHdyaXRlci5vZmZzZXQgKz0gdmFsdWUuYnl0ZUxlbmd0aDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlU3RyaW5nVmFsdWUod3JpdGVyOiBCaW5hcnlXcml0ZXIsIHZhbHVlOiBzdHJpbmcpIHtcblx0d3JpdGVyLm9mZnNldCA9IGVuY29kZVN0cmluZ1RvKHdyaXRlci52aWV3LCB3cml0ZXIub2Zmc2V0LCB2YWx1ZSk7XG5cblx0aWYgKHdyaXRlci5vZmZzZXQgPiB3cml0ZXIudmlldy5ieXRlTGVuZ3RoKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdFeGNlZWRlZCBEYXRhVmlldyBzaXplJyk7XG5cdH1cbn1cblxuY29uc3QgZmxvYXRzID0gbmV3IEZsb2F0MzJBcnJheSgxKTtcblxuZnVuY3Rpb24gd3JpdGVTaG9ydExlbmd0aCh3cml0ZXI6IEJpbmFyeVdyaXRlciwgdHlwZTogVHlwZSwgbGVuZ3RoOiBudW1iZXIpIHtcblx0aWYgKGxlbmd0aCA8IDMxKSB7XG5cdFx0d3JpdGVVaW50OCh3cml0ZXIsIHR5cGUgfCBsZW5ndGgpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGVsc2Uge1xuXHRcdHdyaXRlVWludDgod3JpdGVyLCB0eXBlIHwgMHgxZik7XG5cdFx0d3JpdGVMZW5ndGgod3JpdGVyLCBsZW5ndGgpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVBbnkod3JpdGVyOiBCaW5hcnlXcml0ZXIsIHZhbHVlOiBhbnksIHN0cmluZ3M6IE1hcDxzdHJpbmcsIG51bWJlcj4pIHtcblx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHR3cml0ZVVpbnQ4KHdyaXRlciwgVHlwZS5TcGVjaWFsIHwgU3BlY2lhbC5VbmRlZmluZWQpO1xuXHR9IGVsc2UgaWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0d3JpdGVVaW50OCh3cml0ZXIsIFR5cGUuU3BlY2lhbCB8IFNwZWNpYWwuTnVsbCk7XG5cdH0gZWxzZSBpZiAodmFsdWUgPT09IHRydWUpIHtcblx0XHR3cml0ZVVpbnQ4KHdyaXRlciwgVHlwZS5TcGVjaWFsIHwgU3BlY2lhbC5UcnVlKTtcblx0fSBlbHNlIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcblx0XHR3cml0ZVVpbnQ4KHdyaXRlciwgVHlwZS5TcGVjaWFsIHwgU3BlY2lhbC5GYWxzZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuXHRcdGlmICgodmFsdWUgPj4+IDApID09PSB2YWx1ZSkge1xuXHRcdFx0dmFsdWUgPSB2YWx1ZSA+Pj4gMDtcblxuXHRcdFx0aWYgKHZhbHVlICYgMHhmZmZmMDAwMCkge1xuXHRcdFx0XHR3cml0ZVVpbnQ4KHdyaXRlciwgVHlwZS5OdW1iZXIgfCBOdW1iZXJUeXBlLlVpbnQzMik7XG5cdFx0XHRcdHdyaXRlVWludDMyKHdyaXRlciwgdmFsdWUpO1xuXHRcdFx0fSBlbHNlIGlmICh2YWx1ZSAmIDB4ZmYwMCkge1xuXHRcdFx0XHR3cml0ZVVpbnQ4KHdyaXRlciwgVHlwZS5OdW1iZXIgfCBOdW1iZXJUeXBlLlVpbnQxNik7XG5cdFx0XHRcdHdyaXRlVWludDE2KHdyaXRlciwgdmFsdWUpO1xuXHRcdFx0fSBlbHNlIGlmICh2YWx1ZSAmIDB4ZTApIHtcblx0XHRcdFx0d3JpdGVVaW50OCh3cml0ZXIsIFR5cGUuTnVtYmVyIHwgTnVtYmVyVHlwZS5VaW50OCk7XG5cdFx0XHRcdHdyaXRlVWludDgod3JpdGVyLCB2YWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3cml0ZVVpbnQ4KHdyaXRlciwgVHlwZS5UaW55UG9zaXRpdmVOdW1iZXIgfCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICgodmFsdWUgfCAwKSA9PT0gdmFsdWUpIHtcblx0XHRcdHZhbHVlID0gdmFsdWUgfCAwO1xuXG5cdFx0XHRpZiAodmFsdWUgPiAtMzIgJiYgdmFsdWUgPD0gLTEpIHtcblx0XHRcdFx0d3JpdGVVaW50OCh3cml0ZXIsIFR5cGUuVGlueU5lZ2F0aXZlTnVtYmVyIHwgKC12YWx1ZSAtIDEpKTtcblx0XHRcdH0gZWxzZSBpZiAodmFsdWUgPj0gLTEyOCAmJiB2YWx1ZSA8PSAxMjcpIHtcblx0XHRcdFx0d3JpdGVVaW50OCh3cml0ZXIsIFR5cGUuTnVtYmVyIHwgTnVtYmVyVHlwZS5JbnQ4KTtcblx0XHRcdFx0d3JpdGVJbnQ4KHdyaXRlciwgdmFsdWUpO1xuXHRcdFx0fSBlbHNlIGlmICh2YWx1ZSA+PSAtMzI3NjggJiYgdmFsdWUgPD0gMzI3NjcpIHtcblx0XHRcdFx0d3JpdGVVaW50OCh3cml0ZXIsIFR5cGUuTnVtYmVyIHwgTnVtYmVyVHlwZS5JbnQxNik7XG5cdFx0XHRcdHdyaXRlSW50MTYod3JpdGVyLCB2YWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3cml0ZVVpbnQ4KHdyaXRlciwgVHlwZS5OdW1iZXIgfCBOdW1iZXJUeXBlLkludDMyKTtcblx0XHRcdFx0d3JpdGVJbnQzMih3cml0ZXIsIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0ZmxvYXRzWzBdID0gdmFsdWU7XG5cblx0XHRcdGlmIChmbG9hdHNbMF0gPT09IHZhbHVlKSB7XG5cdFx0XHRcdHdyaXRlVWludDgod3JpdGVyLCBUeXBlLk51bWJlciB8IE51bWJlclR5cGUuRmxvYXQzMik7XG5cdFx0XHRcdHdyaXRlRmxvYXQzMih3cml0ZXIsIHZhbHVlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdyaXRlVWludDgod3JpdGVyLCBUeXBlLk51bWJlciB8IE51bWJlclR5cGUuRmxvYXQ2NCk7XG5cdFx0XHRcdHdyaXRlRmxvYXQ2NCh3cml0ZXIsIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdGNvbnN0IGluZGV4ID0gc3RyaW5ncy5nZXQodmFsdWUpO1xuXG5cdFx0aWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHdyaXRlU2hvcnRMZW5ndGgod3JpdGVyLCBUeXBlLlN0cmluZ1JlZiwgaW5kZXgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBsZW5ndGggPSBzdHJpbmdMZW5ndGhJbkJ5dGVzKHZhbHVlKTtcblx0XHRcdHdyaXRlU2hvcnRMZW5ndGgod3JpdGVyLCBUeXBlLlN0cmluZywgbGVuZ3RoKTtcblx0XHRcdHdyaXRlU3RyaW5nVmFsdWUod3JpdGVyLCB2YWx1ZSk7XG5cdFx0XHRzdHJpbmdzLnNldCh2YWx1ZSwgc3RyaW5ncy5zaXplKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRjb25zdCBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG5cdFx0d3JpdGVTaG9ydExlbmd0aCh3cml0ZXIsIFR5cGUuQXJyYXksIGxlbmd0aCk7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHR3cml0ZUFueSh3cml0ZXIsIHZhbHVlW2ldLCBzdHJpbmdzKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcblx0XHRcdHdyaXRlVWludDgod3JpdGVyLCBUeXBlLlNwZWNpYWwgfCBTcGVjaWFsLlVpbnQ4QXJyYXkpO1xuXHRcdFx0d3JpdGVVaW50OEFycmF5KHdyaXRlciwgdmFsdWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuXHRcdFx0d3JpdGVTaG9ydExlbmd0aCh3cml0ZXIsIFR5cGUuT2JqZWN0LCBrZXlzLmxlbmd0aCk7XG5cblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjb25zdCBrZXkgPSBrZXlzW2ldO1xuXHRcdFx0XHRjb25zdCBpbmRleCA9IHN0cmluZ3MuZ2V0KGtleSk7XG5cblx0XHRcdFx0aWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHR3cml0ZUxlbmd0aCh3cml0ZXIsIHN0cmluZ0xlbmd0aEluQnl0ZXMoa2V5KSk7XG5cdFx0XHRcdFx0d3JpdGVTdHJpbmdWYWx1ZSh3cml0ZXIsIGtleSk7XG5cblx0XHRcdFx0XHRpZiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRzdHJpbmdzLnNldChrZXksIHN0cmluZ3Muc2l6ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHdyaXRlTGVuZ3RoKHdyaXRlciwgMCk7XG5cdFx0XHRcdFx0d3JpdGVMZW5ndGgod3JpdGVyLCBpbmRleCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR3cml0ZUFueSh3cml0ZXIsIHZhbHVlW2tleV0sIHN0cmluZ3MpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdHlwZTogJHt2YWx1ZX1gKTtcblx0fVxufVxuXG5kZWNsYXJlIGNvbnN0IEluZGV4U2l6ZUVycm9yOiBhbnk7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NpemVFcnJvcihlOiBFcnJvcikge1xuXHRpZiAodHlwZW9mIFJhbmdlRXJyb3IgIT09ICd1bmRlZmluZWQnICYmIGUgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSByZXR1cm4gdHJ1ZTtcblx0aWYgKHR5cGVvZiBUeXBlRXJyb3IgIT09ICd1bmRlZmluZWQnICYmIGUgaW5zdGFuY2VvZiBUeXBlRXJyb3IpIHJldHVybiB0cnVlO1xuXHRpZiAodHlwZW9mIEluZGV4U2l6ZUVycm9yICE9PSAndW5kZWZpbmVkJyAmJiBlIGluc3RhbmNlb2YgSW5kZXhTaXplRXJyb3IpIHJldHVybiB0cnVlO1xuXHRpZiAoL0RhdGFWaWV3Ly50ZXN0KGUubWVzc2FnZSkpIHJldHVybiB0cnVlO1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZVdpdGhSZXNpemUod3JpdGVyOiBCaW5hcnlXcml0ZXIsIHdyaXRlOiAoKSA9PiB2b2lkKSB7XG5cdHdoaWxlICh0cnVlKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHdyaXRlKCk7XG5cdFx0XHRicmVhaztcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRpZiAoaXNTaXplRXJyb3IoZSkpIHtcblx0XHRcdFx0cmVzaXplV3JpdGVyKHdyaXRlcik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIvaG9tZS9hbHBoYS9EZXNrdG9wL2Rldi90Yy1zb2NrZXRzL3NyYyJ9
