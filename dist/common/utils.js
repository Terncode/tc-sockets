"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasArrayBuffer = exports.isBinaryOnlyPacket = exports.deferred = exports.supportsBinary = exports.checkRateLimit2 = exports.checkRateLimit3 = exports.parseRateLimit = exports.cloneDeep = exports.queryString = exports.getLength = void 0;
var interfaces_1 = require("./interfaces");
function getLength(message) {
    return (message ? message.length || message.byteLength : 0) | 0;
}
exports.getLength = getLength;
function queryString(params) {
    var query = Object.keys(params || {})
        .filter(function (key) { return params[key] != null; })
        .map(function (key) { return "".concat(key, "=").concat(encodeURIComponent(params[key])); })
        .join('&');
    return query ? "?".concat(query) : '';
}
exports.queryString = queryString;
function cloneDeep(value) {
    return JSON.parse(JSON.stringify(value));
}
exports.cloneDeep = cloneDeep;
var times = {
    s: 1000,
    m: 1000 * 60,
    h: 1000 * 60 * 60,
};
function parseRateLimit(value, extended) {
    var m = /^(\d+)\/(\d+)?([smh])$/.exec(value);
    if (!m)
        throw new Error('Invalid rate limit value');
    var limit = +m[1];
    var frame = +(m[2] || '1') * times[m[3]];
    if (extended && frame < 5000) {
        limit *= 2;
        frame *= 2;
    }
    return { limit: limit, frame: frame };
}
exports.parseRateLimit = parseRateLimit;
function checkRateLimit3(funcId, callsList, limit, frame) {
    var index = funcId << 1;
    while (callsList.length <= (index + 1))
        callsList.push(0);
    var bucketTime = callsList[index];
    var bucketCount = callsList[index + 1];
    var time = (Date.now() / frame) | 0;
    if (bucketTime === time) {
        if (bucketCount >= limit) {
            return false;
        }
        else {
            callsList[index + 1] = bucketCount + 1;
        }
    }
    else {
        callsList[index] = time;
        callsList[index + 1] = 1;
    }
    return true;
}
exports.checkRateLimit3 = checkRateLimit3;
function checkRateLimit2(funcId, callsList, rates) {
    var rate = rates[funcId];
    if (!rate)
        return true;
    return checkRateLimit3(funcId, callsList, rate.limit, rate.frame);
}
exports.checkRateLimit2 = checkRateLimit2;
var supportsBinaryValue;
/* istanbul ignore next */
function supportsBinary() {
    if (supportsBinaryValue != null) {
        return supportsBinaryValue;
    }
    var protocol = 'https:' === location.protocol ? 'wss' : 'ws';
    if (typeof global !== 'undefined' && 'WebSocket' in global) {
        return true;
    }
    if ('WebSocket' in window) {
        if ('binaryType' in WebSocket.prototype) {
            return true;
        }
        try {
            return !!(new WebSocket(protocol + '://.').binaryType);
        }
        catch (_a) { }
    }
    return false;
}
exports.supportsBinary = supportsBinary;
function deferred() {
    var obj = {};
    obj.promise = new Promise(function (resolve, reject) {
        obj.resolve = resolve;
        obj.reject = reject;
    });
    return obj;
}
exports.deferred = deferred;
function isBinaryOnlyPacket(method) {
    return typeof method !== 'string' && method[1].binary && hasArrayBuffer(method[1].binary);
}
exports.isBinaryOnlyPacket = isBinaryOnlyPacket;
function hasArrayBuffer(def) {
    return Array.isArray(def) ? def.some(hasArrayBuffer) : def === interfaces_1.Bin.Buffer;
}
exports.hasArrayBuffer = hasArrayBuffer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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O1lBQ0gsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDdkQ7UUFBQyxXQUFNLEdBQUc7S0FDWDtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2QsQ0FBQztBQXRCRCx3Q0FzQkM7QUFRRCxTQUFnQixRQUFRO0lBQ3ZCLElBQU0sR0FBRyxHQUFnQixFQUFTLENBQUM7SUFFbkMsR0FBRyxDQUFDLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBSSxVQUFVLE9BQU8sRUFBRSxNQUFNO1FBQ3JELEdBQUcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3RCLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBVEQsNEJBU0M7QUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxNQUFpQjtJQUNuRCxPQUFPLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0YsQ0FBQztBQUZELGdEQUVDO0FBRUQsU0FBZ0IsY0FBYyxDQUFDLEdBQW9CO0lBQ2xELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLGdCQUFHLENBQUMsTUFBTSxDQUFDO0FBQzNFLENBQUM7QUFGRCx3Q0FFQyIsImZpbGUiOiJjb21tb24vdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXRob2REZWYsIEJpbmFyeURlZiwgQmluLCBSYXRlTGltaXREZWYgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGVuZ3RoKG1lc3NhZ2U6IGFueSk6IG51bWJlciB7XG5cdHJldHVybiAobWVzc2FnZSA/IChtZXNzYWdlIGFzIHN0cmluZyB8IEJ1ZmZlcikubGVuZ3RoIHx8IChtZXNzYWdlIGFzIEFycmF5QnVmZmVyKS5ieXRlTGVuZ3RoIDogMCkgfCAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlTdHJpbmcocGFyYW1zOiBhbnkpIHtcblx0Y29uc3QgcXVlcnkgPSBPYmplY3Qua2V5cyhwYXJhbXMgfHwge30pXG5cdFx0LmZpbHRlcihrZXkgPT4gcGFyYW1zW2tleV0gIT0gbnVsbClcblx0XHQubWFwKGtleSA9PiBgJHtrZXl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtc1trZXldKX1gKVxuXHRcdC5qb2luKCcmJyk7XG5cblx0cmV0dXJuIHF1ZXJ5ID8gYD8ke3F1ZXJ5fWAgOiAnJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lRGVlcDxUPih2YWx1ZTogVCk6IFQge1xuXHRyZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xufVxuXG5jb25zdCB0aW1lczogeyBba2V5OiBzdHJpbmddOiBudW1iZXI7IH0gPSB7XG5cdHM6IDEwMDAsXG5cdG06IDEwMDAgKiA2MCxcblx0aDogMTAwMCAqIDYwICogNjAsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSYXRlTGltaXQodmFsdWU6IHN0cmluZywgZXh0ZW5kZWQ6IGJvb2xlYW4pIHtcblx0Y29uc3QgbSA9IC9eKFxcZCspXFwvKFxcZCspPyhbc21oXSkkLy5leGVjKHZhbHVlKTtcblx0aWYgKCFtKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmF0ZSBsaW1pdCB2YWx1ZScpO1xuXG5cdGxldCBsaW1pdCA9ICttWzFdO1xuXHRsZXQgZnJhbWUgPSArKG1bMl0gfHwgJzEnKSAqIHRpbWVzW21bM11dO1xuXG5cdGlmIChleHRlbmRlZCAmJiBmcmFtZSA8IDUwMDApIHtcblx0XHRsaW1pdCAqPSAyO1xuXHRcdGZyYW1lICo9IDI7XG5cdH1cblxuXHRyZXR1cm4geyBsaW1pdCwgZnJhbWUgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUmF0ZUxpbWl0MyhmdW5jSWQ6IG51bWJlciwgY2FsbHNMaXN0OiBudW1iZXJbXSwgbGltaXQ6IG51bWJlciwgZnJhbWU6IG51bWJlcikge1xuXHRjb25zdCBpbmRleCA9IGZ1bmNJZCA8PCAxO1xuXG5cdHdoaWxlIChjYWxsc0xpc3QubGVuZ3RoIDw9IChpbmRleCArIDEpKSBjYWxsc0xpc3QucHVzaCgwKTtcblxuXHRjb25zdCBidWNrZXRUaW1lID0gY2FsbHNMaXN0W2luZGV4XTtcblx0Y29uc3QgYnVja2V0Q291bnQgPSBjYWxsc0xpc3RbaW5kZXggKyAxXTtcblx0Y29uc3QgdGltZSA9IChEYXRlLm5vdygpIC8gZnJhbWUpIHwgMDtcblxuXHRpZiAoYnVja2V0VGltZSA9PT0gdGltZSkge1xuXHRcdGlmIChidWNrZXRDb3VudCA+PSBsaW1pdCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjYWxsc0xpc3RbaW5kZXggKyAxXSA9IGJ1Y2tldENvdW50ICsgMTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Y2FsbHNMaXN0W2luZGV4XSA9IHRpbWU7XG5cdFx0Y2FsbHNMaXN0W2luZGV4ICsgMV0gPSAxO1xuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1JhdGVMaW1pdDIoZnVuY0lkOiBudW1iZXIsIGNhbGxzTGlzdDogbnVtYmVyW10sIHJhdGVzOiAoUmF0ZUxpbWl0RGVmIHwgdW5kZWZpbmVkKVtdKSB7XG5cdGNvbnN0IHJhdGUgPSByYXRlc1tmdW5jSWRdO1xuXHRpZiAoIXJhdGUpIHJldHVybiB0cnVlO1xuXG5cdHJldHVybiBjaGVja1JhdGVMaW1pdDMoZnVuY0lkLCBjYWxsc0xpc3QsIHJhdGUubGltaXQsIHJhdGUuZnJhbWUpO1xufVxuXG5sZXQgc3VwcG9ydHNCaW5hcnlWYWx1ZTogYm9vbGVhbiB8IHVuZGVmaW5lZDtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c0JpbmFyeSgpIHtcblx0aWYgKHN1cHBvcnRzQmluYXJ5VmFsdWUgIT0gbnVsbCkge1xuXHRcdHJldHVybiBzdXBwb3J0c0JpbmFyeVZhbHVlO1xuXHR9XG5cblx0Y29uc3QgcHJvdG9jb2wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2wgPyAnd3NzJyA6ICd3cyc7XG5cblx0aWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmICdXZWJTb2NrZXQnIGluIGdsb2JhbCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCdXZWJTb2NrZXQnIGluIHdpbmRvdykge1xuXHRcdGlmICgnYmluYXJ5VHlwZScgaW4gV2ViU29ja2V0LnByb3RvdHlwZSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiAhIShuZXcgV2ViU29ja2V0KHByb3RvY29sICsgJzovLy4nKS5iaW5hcnlUeXBlKTtcblx0XHR9IGNhdGNoIHsgfVxuXHR9XG5cblx0cmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlZmVycmVkPFQ+IHtcblx0cHJvbWlzZTogUHJvbWlzZTxUPjtcblx0cmVzb2x2ZShyZXN1bHQ6IFQpOiB2b2lkO1xuXHRyZWplY3QoZXJyb3I/OiBFcnJvcik6IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZlcnJlZDxUPigpOiBEZWZlcnJlZDxUPiB7XG5cdGNvbnN0IG9iajogRGVmZXJyZWQ8VD4gPSB7fSBhcyBhbnk7XG5cblx0b2JqLnByb21pc2UgPSBuZXcgUHJvbWlzZTxUPihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0b2JqLnJlc29sdmUgPSByZXNvbHZlO1xuXHRcdG9iai5yZWplY3QgPSByZWplY3Q7XG5cdH0pO1xuXG5cdHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0JpbmFyeU9ubHlQYWNrZXQobWV0aG9kOiBNZXRob2REZWYpIHtcblx0cmV0dXJuIHR5cGVvZiBtZXRob2QgIT09ICdzdHJpbmcnICYmIG1ldGhvZFsxXS5iaW5hcnkgJiYgaGFzQXJyYXlCdWZmZXIobWV0aG9kWzFdLmJpbmFyeSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNBcnJheUJ1ZmZlcihkZWY6IEJpbmFyeURlZiB8IEJpbik6IGJvb2xlYW4ge1xuXHRyZXR1cm4gQXJyYXkuaXNBcnJheShkZWYpID8gZGVmLnNvbWUoaGFzQXJyYXlCdWZmZXIpIDogZGVmID09PSBCaW4uQnVmZmVyO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvaG9tZS9hbHBoYS9EZXNrdG9wL2Rldi90Yy1zb2NrZXRzL3NyYyJ9
