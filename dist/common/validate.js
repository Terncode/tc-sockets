"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValid = void 0;
var interfaces_1 = require("./interfaces");
function isNumber(value) {
    return typeof value === 'number';
}
function isInt(min, max) {
    return function (value) { return isNumber(value) && ((value | 0) === value) && value >= min && value <= max; };
}
function isUint(max) {
    return function (value) { return isNumber(value) && ((value >>> 0) === value) && value >= 0 && value <= max; };
}
var validators = [];
validators[interfaces_1.Bin.U8] = isUint(0xff);
validators[interfaces_1.Bin.I8] = isInt(-128, 127);
validators[interfaces_1.Bin.U16] = isUint(0xffff);
validators[interfaces_1.Bin.I16] = isInt(-32768, 32767);
validators[interfaces_1.Bin.U32] = isUint(0xffffffff);
validators[interfaces_1.Bin.I32] = isInt(-2147483648, 2147483647);
validators[interfaces_1.Bin.F32] = function (value) { return isNumber(value); };
validators[interfaces_1.Bin.F64] = function (value) { return isNumber(value); };
validators[interfaces_1.Bin.Bool] = function (value) { return value === true || value === false; };
validators[interfaces_1.Bin.Str] = function (value) { return value === null || typeof value === 'string'; };
validators[interfaces_1.Bin.Obj] = function (value) { return value === null || typeof value === 'object'; };
function isValid(value, def) {
    if (Array.isArray(def)) {
        if (!Array.isArray(value))
            return false;
        if (def.length === 1) {
            return value.every(function (v) { return isValid(v, def[0]); });
        }
        else {
            return value.every(function (v) {
                if (!v || v.length !== def.length)
                    return false;
                for (var i = 0; i < def.length; i++) {
                    if (!isValid(v[i], def[i]))
                        return false;
                }
                return true;
            });
        }
    }
    else {
        return validators[def](value);
    }
}
exports.isValid = isValid;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tb24vdmFsaWRhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQW1DO0FBSW5DLFNBQVMsUUFBUSxDQUFDLEtBQVU7SUFDM0IsT0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7QUFDbEMsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLEdBQVcsRUFBRSxHQUFXO0lBQ3RDLE9BQU8sVUFBQyxLQUFVLElBQUssT0FBQSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksR0FBRyxJQUFJLEtBQUssSUFBSSxHQUFHLEVBQTFFLENBQTBFLENBQUM7QUFDbkcsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLEdBQVc7SUFDMUIsT0FBTyxVQUFDLEtBQVUsSUFBSyxPQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLEdBQUcsRUFBMUUsQ0FBMEUsQ0FBQztBQUNuRyxDQUFDO0FBRUQsSUFBTSxVQUFVLEdBQWdCLEVBQUUsQ0FBQztBQUNuQyxVQUFVLENBQUMsZ0JBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEMsVUFBVSxDQUFDLGdCQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3RDLFVBQVUsQ0FBQyxnQkFBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNyQyxVQUFVLENBQUMsZ0JBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDM0MsVUFBVSxDQUFDLGdCQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3pDLFVBQVUsQ0FBQyxnQkFBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNyRCxVQUFVLENBQUMsZ0JBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxVQUFBLEtBQUssSUFBSSxPQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBZixDQUFlLENBQUM7QUFDL0MsVUFBVSxDQUFDLGdCQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsVUFBQSxLQUFLLElBQUksT0FBQSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQWYsQ0FBZSxDQUFDO0FBQy9DLFVBQVUsQ0FBQyxnQkFBRyxDQUFDLElBQUksQ0FBQyxHQUFHLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxFQUFqQyxDQUFpQyxDQUFDO0FBQ2xFLFVBQVUsQ0FBQyxnQkFBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxLQUFLLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQTNDLENBQTJDLENBQUM7QUFDM0UsVUFBVSxDQUFDLGdCQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLEtBQUssSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBM0MsQ0FBMkMsQ0FBQztBQUUzRSxTQUFnQixPQUFPLENBQUMsS0FBVSxFQUFFLEdBQVE7SUFDM0MsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUN4QixPQUFPLEtBQUssQ0FBQztRQUVkLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDckIsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsT0FBTyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBbEIsQ0FBa0IsQ0FBQyxDQUFDO1NBQzVDO2FBQU07WUFDTixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBQSxDQUFDO2dCQUNuQixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLE1BQU07b0JBQ2hDLE9BQU8sS0FBSyxDQUFDO2dCQUVkLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3pCLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUVELE9BQU8sSUFBSSxDQUFDO1lBQ2IsQ0FBQyxDQUFDLENBQUM7U0FDSDtLQUNEO1NBQU07UUFDTixPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM5QjtBQUNGLENBQUM7QUF2QkQsMEJBdUJDIiwiZmlsZSI6ImNvbW1vbi92YWxpZGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpbiB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbnR5cGUgVmFsaWRhdG9yID0gKHZhbHVlOiBhbnkpID0+IGJvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBudW1iZXIge1xuXHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNJbnQobWluOiBudW1iZXIsIG1heDogbnVtYmVyKSB7XG5cdHJldHVybiAodmFsdWU6IGFueSkgPT4gaXNOdW1iZXIodmFsdWUpICYmICgodmFsdWUgfCAwKSA9PT0gdmFsdWUpICYmIHZhbHVlID49IG1pbiAmJiB2YWx1ZSA8PSBtYXg7XG59XG5cbmZ1bmN0aW9uIGlzVWludChtYXg6IG51bWJlcikge1xuXHRyZXR1cm4gKHZhbHVlOiBhbnkpID0+IGlzTnVtYmVyKHZhbHVlKSAmJiAoKHZhbHVlID4+PiAwKSA9PT0gdmFsdWUpICYmIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gbWF4O1xufVxuXG5jb25zdCB2YWxpZGF0b3JzOiBWYWxpZGF0b3JbXSA9IFtdO1xudmFsaWRhdG9yc1tCaW4uVThdID0gaXNVaW50KDB4ZmYpO1xudmFsaWRhdG9yc1tCaW4uSThdID0gaXNJbnQoLTEyOCwgMTI3KTtcbnZhbGlkYXRvcnNbQmluLlUxNl0gPSBpc1VpbnQoMHhmZmZmKTtcbnZhbGlkYXRvcnNbQmluLkkxNl0gPSBpc0ludCgtMzI3NjgsIDMyNzY3KTtcbnZhbGlkYXRvcnNbQmluLlUzMl0gPSBpc1VpbnQoMHhmZmZmZmZmZik7XG52YWxpZGF0b3JzW0Jpbi5JMzJdID0gaXNJbnQoLTIxNDc0ODM2NDgsIDIxNDc0ODM2NDcpO1xudmFsaWRhdG9yc1tCaW4uRjMyXSA9IHZhbHVlID0+IGlzTnVtYmVyKHZhbHVlKTtcbnZhbGlkYXRvcnNbQmluLkY2NF0gPSB2YWx1ZSA9PiBpc051bWJlcih2YWx1ZSk7XG52YWxpZGF0b3JzW0Jpbi5Cb29sXSA9IHZhbHVlID0+IHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZTtcbnZhbGlkYXRvcnNbQmluLlN0cl0gPSB2YWx1ZSA9PiB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xudmFsaWRhdG9yc1tCaW4uT2JqXSA9IHZhbHVlID0+IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkKHZhbHVlOiBhbnksIGRlZjogYW55KTogYm9vbGVhbiB7XG5cdGlmIChBcnJheS5pc0FycmF5KGRlZikpIHtcblx0XHRpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0aWYgKGRlZi5sZW5ndGggPT09IDEpIHtcblx0XHRcdHJldHVybiB2YWx1ZS5ldmVyeSh2ID0+IGlzVmFsaWQodiwgZGVmWzBdKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB2YWx1ZS5ldmVyeSh2ID0+IHtcblx0XHRcdFx0aWYgKCF2IHx8IHYubGVuZ3RoICE9PSBkZWYubGVuZ3RoKVxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGRlZi5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGlmICghaXNWYWxpZCh2W2ldLCBkZWZbaV0pKVxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHZhbGlkYXRvcnNbZGVmXSh2YWx1ZSk7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL2hvbWUvYWxwaGEvRGVza3RvcC9kZXYvdGMtc29ja2V0cy9zcmMifQ==
